package languagelab.mps.lang.text.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Arbitrary_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CompositeBinding_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ConstantBinding_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Editor_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ElementBinding_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new NonTerminal_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Optional_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ReferenceBinding_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new RightHandSide_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Rule_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new RuleReference_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Terminal_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new WhiteSpace_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc91301b0L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143629L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914362eL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143634L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143638L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914363dL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143642L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143646L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143649L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914364cL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bcc74123dL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914363cL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bcc741243L)).seal();
}
