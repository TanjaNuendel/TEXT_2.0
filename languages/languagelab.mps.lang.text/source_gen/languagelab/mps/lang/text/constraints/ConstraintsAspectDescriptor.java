package languagelab.mps.lang.text.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new ConstantBinding_Constraints();
      case 1:
        return new Editor_Constraints();
      case 2:
        return new ElementBinding_Constraints();
      case 3:
        return new NonTerminal_Constraints();
      case 4:
        return new ReferenceBinding_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914362eL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143634L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143638L), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914363dL), MetaIdFactory.conceptId(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc9143646L)).seal();
}
