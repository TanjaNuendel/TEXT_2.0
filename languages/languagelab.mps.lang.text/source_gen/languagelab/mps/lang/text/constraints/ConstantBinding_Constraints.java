package languagelab.mps.lang.text.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConstantBinding_Constraints extends BaseConstraintsDescriptor {
  public ConstantBinding_Constraints() {
    super(CONCEPTS.ConstantBinding$It);
  }

  public static class Type_Property extends BasePropertyConstraintsDescriptor {
    public Type_Property(ConstraintsDescriptor container) {
      super(PROPS.type$djZD, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:196d8a42-2b02-4579-9264-88517b407831(languagelab.mps.lang.text.constraints)", "1409946510186021700"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return propertyValue.matches("[a-zA-Z[_]][a-zA-Z0-9[_]]*");
    }
  }
  public static class Value_Property extends BasePropertyConstraintsDescriptor {
    public Value_Property(ConstraintsDescriptor container) {
      super(PROPS.value$deAi, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:196d8a42-2b02-4579-9264-88517b407831(languagelab.mps.lang.text.constraints)", "1409946510186029632"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return propertyValue.matches("[a-zA-Z[_]][a-zA-Z0-9[_]]*");
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.type$djZD, new Type_Property(this));
    properties.put(PROPS.value$deAi, new Value_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ConstantBinding$It = MetaAdapterFactory.getConcept(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914362eL, "languagelab.mps.lang.text.structure.ConstantBinding");
  }

  private static final class PROPS {
    /*package*/ static final SProperty type$djZD = MetaAdapterFactory.getProperty(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914362eL, 0x7b555f3bc9143631L, "type");
    /*package*/ static final SProperty value$deAi = MetaAdapterFactory.getProperty(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914362eL, 0x7b555f3bc914362fL, "value");
  }
}
