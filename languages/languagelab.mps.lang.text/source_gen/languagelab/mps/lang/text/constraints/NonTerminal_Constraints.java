package languagelab.mps.lang.text.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPointerOperations;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class NonTerminal_Constraints extends BaseConstraintsDescriptor {
  public NonTerminal_Constraints() {
    super(CONCEPTS.NonTerminal$a4);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.referenced_rule$Jepi, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:196d8a42-2b02-4579-9264-88517b407831(languagelab.mps.lang.text.constraints)", "559074955765980479");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            List<SNode> rules = ListSequence.fromListWithValues(new ArrayList(), SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Editor$pC, true, false), LINKS.rules$kWCQ));
            rules.addAll(SLinkOperations.getChildren(SPointerOperations.resolveNode(new SNodePointer("r:00126ce3-8bc3-4c45-b771-39515812758c(languagelab.mps.lang.textual.predefined)", "533460887085615501"), null), LINKS.rules$kWCQ));
            return new ListScope(rules) {
              public String getName(SNode child) {
                return SPropertyOperations.getString(SNodeOperations.cast(child, CONCEPTS.INamedConcept$Kd), PROPS.name$MnvL);
              }
            };
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NonTerminal$a4 = MetaAdapterFactory.getConcept(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bc914363dL, "languagelab.mps.lang.text.structure.NonTerminal");
    /*package*/ static final SConcept Editor$pC = MetaAdapterFactory.getConcept(0xde39c9e21d4262L, 0x8abd8cb18604d965L, 0x237416bd40a18060L, "languagelab.mps.lang.textual.structure.Editor");
    /*package*/ static final SInterfaceConcept INamedConcept$Kd = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink referenced_rule$Jepi = MetaAdapterFactory.getReferenceLink(0x94b477d9e67c45feL, 0x813c26d61ae04a91L, 0x7b555f3bcc74123dL, 0x7b555f3bcc74123eL, "referenced_rule");
    /*package*/ static final SContainmentLink rules$kWCQ = MetaAdapterFactory.getContainmentLink(0xde39c9e21d4262L, 0x8abd8cb18604d965L, 0x237416bd40a18060L, 0x237416bd40a18066L, "rules");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
